             LAB 6 ASSIGNMENT

             
              
// QUESTION 1
// Implement polynomial addition and multiplication using linked lists.

#include <stdio.h>
#include <stdlib.h>

struct node 
{
    int coef;
    int expo;
    struct node *link;

}*start1,*start2,*start3;

struct node *create(struct node *);
struct node *insert(struct node *,int ,int);   // int for coef and expo respectively.
void display(struct node *);
void poly_add(struct node *,struct node *);
void poly_mul(struct node *,struct node *);

void main()
{

struct node *start1=NULL;
struct node *start2=NULL;



int choice;

printf("1.CREATE\n2.DSIPLAY\n3.ADDITION\n4.MULTIPLICATION");

while(1)
{
    printf("Enter your chocice");
    scanf("%d",&choice);


switch(choice)
{
    case 1:  
               printf("Enter the 1st polynomial\n");
                start1=create(start1); 
                printf("\n");
           printf("Enter the 2nd polynomial\n");
             start2=create(start2);    
                 break;


    case 2: 
                 
printf("Therefore your 1st polynomial is \n");
                 display(start1);
            printf("\n");
printf("Therefore your 2nd polynomial is \n");

            display(start2);
            break;


   case 3: printf("Adition of two polynomial are :-\n");
               
            poly_add(start1,start2);
         break;
    case 4: printf("Multiplication of two polynomials are :-\n");   
           poly_mul(start1,start2);

           default:
                    exit(0);

}

}

}

struct node *create(struct node *start)
{
    int n,expo,coeff;
    printf("Enter the size of the polynomial: ");

    scanf("%d",&n);

    for(int i=0;i<n;i++)
    {
        scanf("%d %d",&coeff, &expo);
      
      start=insert(start,coeff,expo);

    }

    return start;
}

struct node *insert(struct node *start,int co,int ex)

{

 struct node *temp,*p;
  
  temp=(struct node *)malloc(sizeof(struct node));
  temp->coef=co;
  temp->expo=ex;

  if (start==NULL || ex>start->expo)

 {
     temp->link=start;
     start=temp;

 } 

 else
{
     p=start;
     while(p->link!=NULL && p->link->expo)
     {
          
           p=p->link;
     }
     temp->link=p->link;

     p->link=temp;

     }
          return start;
 }

 void display(struct node *p)
{
    while(p!=NULL)
    {
        printf("%dx^%d",p->coef,p->expo);
        p=p->link;
        if(p!=NULL)
        {
            printf("+");

            // p=p->link;      
        }

        else
        
            printf("\n");
        

    }
} 
void poly_add(struct node *p1,struct node *p2)
{
    struct node *start3=NULL;
    while(p1!=NULL && p2!=NULL)
    {
        if(p1->expo > p2->expo)
        {
            start3=insert(start3,p1->coef,p2->expo);
            p1=p1->link;
        }
        else if(p2->expo > p1->expo)
        {
            start3= insert(start3,p2->coef,p2->expo);
            p2=p2->link;

        }

        else if(p1->expo == p2->expo)
         
         {
             start3= insert(start3,p1->coef + p2->coef,p1->expo);
            
                 p1=p1->link;
                 p2=p2->link;
            
         }
    }
    while(p1!=NULL)
    {
        start3= insert(start3,p1->coef,p1->expo);
        p1=p1->link;
    }
    while (p2!=NULL)
    {
        start3= insert(start3,p2->coef,p2->expo);
        p2=p2->link;
    }
    display(start3);
     p1->coef,p1->expo;
}


void poly_mul(struct node *p1,struct node *p2)
{
    struct node *start3=NULL;
    struct node *p2_beg=p2;
    {
        while(p1!=NULL)
        {
            p2=p2_beg;

        while(p2!=NULL)
        {
            start3=insert(start3,p1->coef * p2->coef,p1->expo + p2->expo);
            p2=p2->link;
        }
        p1=p1->link;
    }
    display(start3);
}
    }





// QUESTION 2 
// Reverse a singly linked list using recursion.

#include <stdio.h>
#include<stdlib.h>
struct node{
    int info;
    struct node *link;
}*start;
void createlinklist(int data);
void traverse();
void reverse();
void main()
{
    int data,n,i,element,element1,ch,pos;
    printf("ENTER 1 FOR CREATING LINKED LIST\nENTER 2 TO DISPLAY LINKED LIST\nENTER 3 FOR REVERSING THE ELEMENTS\nENTER 4 TO EXIT\n");
   while(1)
   {
    printf("Enter your choice");
    scanf("%d",&ch);
    switch(ch)
    {
    case 1:
    printf("Enter the number of nodes :");
    scanf("%d",&n);
    for(i=0;i<n;i++)
    {
        printf("Enter data of node %d:",i+1);
        scanf("%d",&data);
        createlinklist(data);
    }
    break;
    case 2:
               traverse();
               break;
      case 3:
              reverse();
                   traverse();
                    break;
            case 4:
            exit;
            return;
}
}   }
void createlinklist(int data)
{
    struct node *temp,*q;
    temp=(struct node*)malloc(sizeof(struct node));
    temp->info=data;
    temp->link=NULL;
    
    if(start==NULL)
    {
        start=temp;
    }
    else
    {
        q=start;
        
        while(q->link!=NULL)
        {
            q=q->link;
        
        }
        q->link=temp;
    }
}
void traverse()
{
    struct node *q;
    if(start==NULL)
    {
        printf("Link list is empty");
        return;
    }
    q=start;
    while(q!=NULL)
    {
    printf("%d->",q->info);
     q=q->link;
    }
    printf("NULL\n");
}

void reverse()
{
    struct node *p1,*p2,*p3;
    if(start->link==NULL)
    {
       printf("Only ne node is present");
       start=p1;
       return;
    }


else
{
    p1=start;
    p2=p1->link;
    p3=p2->link;
    p1->link=NULL;
    p2->link=p1;
    while(p3!=NULL)
    {
        p1=p2;
        p2=p3;
        p3=p3->link;
        p2->link=p1;
    }
    start=p2;
   
}
 
 }





 // QUESTION 3
// Implement PUSH, POP, and TRAVERSE operations on a stack using linked list.

#include <stdlib.h>
#include<stdio.h>
struct node
{
    int info;
    struct node *link;
}*top=NULL;
void push();
void pop();
void display();

void main()
{
    int choice;
    while (1)
    {
        printf("1.Push 2.Pop 3.Display 4.Quit \n");
        scanf("%d",&choice);
        
        switch(choice)
        {
            case 1:push();
            break;
            case 2:pop();
            printf("\n");
            break;
            case 3:display();
            break;
            case 4:exit(1);
            
            default:
            printf("Enter correct choice \n");
        }
    }
}
void push()
{
    struct node *temp;
    int data;
    temp=(struct node*)malloc(sizeof(struct node));
    printf("Enter data \n");
    scanf("%d",&data);
    
    temp->info=data;
    temp->link=top;
    top=temp;
}
void pop()
{
    struct node *temp;
     temp=(struct node*)malloc(sizeof(struct node));
    if(top==NULL)
    
    printf("stack empty");
    
    else{
        temp=top;
        printf("The popped out element is %d\n",temp->info);
        top=top->link;
        free(temp);
    }
}
void display()
{
    struct node *q;
    q=(struct node*)malloc(sizeof(struct node));
    q=top;
    if(top==NULL)
    printf("Stack is empty");
    else
    {
        while(q!=NULL)
        {
            printf("%d->",q->info);
            q=q->link;
        }
        printf("NULL");
        printf("\n");
              
    }
}





// QUESTION 4
// Write a program to copy the contents of one stack to another stack in the same order without using any extra data structure.
#include <stdio.h> 
 
#define MaxSize 100 
 
int stackA[MaxSize],stackB[MaxSize],stackC[MaxSize]; 
 
int sizeA=0,sizeB=0,sizeC=0,top1=-1,top2=-1; 
 
void Push(int *stack,int item, int *size,int *top) 
{ 
	if((*size)>MaxSize) 
	{ 
		printf("OVERFLOW\n"); 
	} 
	else 
	{ 
		stack[*size] = item; 
		(*size)++; 
	}
    *top = *top +1;   
    stack[*top] = item; 
    //printf("%d",sizeA);
} 
 
int Pop(int *stack, int *size,int *top) 
{ 
	if( (*size) <= 0 ) 
	{ 
		return -1; 
	} 
	else 
	{ 
		int x = stack[(*size)-1]; 
		(*size)--; 
		return x; 
	}
    *top = *top -1;  
} 

void RecursiveCloneStack(int stackA[],int stackC[])
{
    if (sizeA== 0)
        return;
    int x;
    int val = stackA[top1];
 
    x=Pop(stackA,&sizeA,&top1);
    top1--;
    RecursiveCloneStack(stackA, stackC);
    Push(stackC,val,&sizeC,&top2);
}
 
void cloneStack(int stackA[],int *sizeA)
{
    //int stackC[MaxSize];
    sizeC=*sizeA;
    int x;
    
    RecursiveCloneStack(stackA, stackC);
    printf("Second stack:\n");
    int f = 0;
    while (sizeC--) {
        if (f == 0) {
            printf("%d  ",stackC[top2] );
            
            f = 1;
        } 
        else{printf("%d  ",stackC[top2] );}  
        top2--;
        x=Pop(stackC,&sizeC,&top2);
    }
}

int main() 
{ 
	int size, it, item; 
	scanf("%d",&size); 
 
	for(it = 0; it<size; it++) 
	{ 
		scanf("%d",&item); 
		Push( stackA, item, &sizeA,&top1); 
    }
    //printf("%d",sizeA);
	cloneStack(stackA,&sizeA); 
	return 0; 
}





// QUESTION 5 
// Write a program to perform the following operations on the data stored in a triplet format for a sparse matrix.

// (a) The number of rows present in the header node/ first row in the triplet format should be reduced by the number of rows with complete 
// zero value present from the bottoms of the sparse matrix.[ Note: If two number of rows present in the bottom of the sparse matrix are completely
//  zero, then the number of rows in the triplet format should be reduced by two]

// (b) The number of columns present in the header node/ first row in the triplet format should be reduced by the number of columns with 
// complete zero value present from the right of the sparse matrix.[ Note: If two number of columns present from the right of the sparse matrix 
// are completely zero, then the number of columns in the triplet format should be reduced by two]

// (c) After reducing the number of rows and number of columns for two such sparse matrix in their respective triplet format, add two sparse 
// matrix (converted into triplet format) with reduced rows and columns. 


#include <stdio.h>
int main()
{
    int i,j,r,c,h=0,a=0,b=0;
    printf("Enter the no of rows: ");
    scanf("%d",&r);
    printf("Enter the no of cols: ");
    scanf("%d",&c);
    int mat[r][c];
    for(i=0;i<r;i++)
        for(j=0;j<c;j++)
        {
            printf("Element for (%d,%d): ",i+1,j+1);
            scanf("%d",&mat[i][j]);
        }
    printf("\nThe matrix is:\n");
    for(i=0;i<r;i++)
    {
        for(j=0;j<c;j++)
        {
            printf("%d  ",mat[i][j]);
            if(mat[i][j]!=0)
            {
                if(i>a)
                {
                    a=i;
                }
                if(j>b)
                {
                    b=j;
                }
                h++;
            }
        }
        printf("\n");
    }
    int t1[h+1][3],t2[h+1][3],s[h+1][3],z=1;
    t1[0][0]=r;
    t1[0][1]=c;
    t1[0][2]=h;
    for(i=0;i<r;i++)
        for(j=0;j<c;j++)
            if(mat[i][j]!=0)
            {
                t1[z][0]=i+1;
                t1[z][1]=j+1;
                t1[z][2]=mat[i][j];
                z++;
            }
    printf("\n3-tuple form:\n");
    for(i=0;i<h+1;i++)
    {
        for (j=0;j<3;j++)
            printf("%d  ",t1[i][j]);
        printf("\n");
    }
    t2[0][0]=a+1;
    t2[0][1]=b+1;
    t2[0][2]=h;
    for(i=1;i<h+1;i++)
        for(j=0;j<3;j++)
            t2[i][j]=t1[i][j];
    printf("\nReduced form:\n");
    for(i=0;i<h+1;i++)
    {
        for (j=0;j<3;j++)
            printf("%d  ",t2[i][j]);
        printf("\n");
    }
    for(i=0;i<h+1;i++)
        for(j=0;j<3;j++)
            s[i][j]=t1[i][j]+t2[i][j];
    printf("\nSum of two 3-tuple matrices is:\n");
    for(i=0;i<h+1;i++)
    {
        for(j=0;j<3;j++)
            printf("%d  ",s[i][j]);
        printf("\n");
    }
    return 0;
}

