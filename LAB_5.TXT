Question - 1
Write a C code to create and reverse a doubly linked list.



#include<stdio.h>
#include<stdlib.h>
struct node{
int info;
struct node *next;
struct node *prev;
} *start;
void createList(int data){
struct node *temp, *q;
temp = (struct node*)malloc(sizeof(struct node));
temp->info = data;
temp->next = NULL;
if (start == NULL){
temp->prev = NULL;
start = temp;
}
else{
q = start;
while (q->next != NULL){
q = q->next;
}
q->next = temp;
temp->prev = q;
} }
void reverse(){
struct node *p1, *p2;
p1 = start;
p2 = p1->next;
p1->next = NULL;
p1->prev = p2;
while (p2 != NULL){
p2->prev = p2->next;
p2->next = p1;
p1 = p2;
p2 = p2->prev;
}
start = p1;
}
void display(){
struct node *q = start;
if (start == NULL){
printf("List is empty!\n");
return;
}
while (q != NULL){
printf("%d->", q->info);
q = q->next;
}
printf("NULL\n");
}
int main(){
start = NULL;
int data, n;
printf("Enter the number of node : ");
scanf("%d", &n);
for (int i=0 ; i<n ; i++){
printf("Enter the %d node : ", i+1);
scanf("%d", &data);
createList(data);
}
display();
reverse();
printf("The reversed linked list is : ");
display();
return 0;
}






Question - 2
Write a C code to delete the duplicate nodes in a single linked 
list. For example, if input: 1->3->3->3->5->6, 
then output 1->3->5->6.


#include<stdio.h>
#include<stdlib.h>
struct node{
int info;
struct node* link;
} *start;
void create_list(int data){
struct node *temp, *q;
temp = malloc(sizeof(struct node));
temp->info = data;
temp->link = NULL;
if (start == NULL){
start = temp;
return;
}
else{
q = start;
while (q->link != NULL){
q = q->link;
}
q->link = temp;
} }
void deleteDuplicate(){
struct node *curr = start;
struct node *q = NULL, *temp = NULL;
if (start == NULL) return;
while (curr != NULL){
temp = curr;
q = curr->link;
while (q != NULL){
if (curr->info == q->info){
temp->link = q->link;
}
else{
temp = q;
}
q = q->link;
}
curr = curr->link;
} }
void displayll(){
struct node *q;
if (start == NULL){
printf("List is empty!");
return;
}
q = start;
while (q != NULL){
printf("%d->", q->info);
q = q->link;
}
printf("NULL\n");
}
int main(){
int data, n;
start = NULL;
printf("Enter the number of nodes : ");
scanf("%d", &n);
for (int i=0 ; i<n ; i++){
printf("Enter the %d node : ", i+1);
scanf("%d", &data);
create_list(data);
}
printf("Entered Linked list is : ");
displayll();
deleteDuplicate();
printf("Linked list after deleting duplicates : ");
displayll();
return 0;
}






Question - 3
Write a C code that exchanges data of every node with its next node, starting from the first node in a single linked list.
Example: Input: 1->2->3->4->5->6->7,  Output: 2->1->4->3->6->5->7
Input: 1->2,  Output: 2->1
Input: 1,   Output: 1



#include<stdio.h>
#include<stdlib.h>
struct node{
int info;
struct node* link;
} *start;
void create_list(int data){
struct node *temp, *q;
temp = malloc(sizeof(struct node));
temp->info = data;
temp->link = NULL;
if (start == NULL){
start = temp;
return;
}
else{
q = start;
while (q->link != NULL){
q = q->link;
}
q->link = temp;
} }
void displayll(){
struct node *q;
if (start == NULL){
printf("List is empty!");
return;
}
q = start;
while (q != NULL){
printf("%d->", q->info);
q = q->link;
}
printf("NULL\n");
}
void swap(int *n1, int *n2){
int temp;
temp = *n1;
*n1 = *n2;
*n2 = temp;
}
void Swapll(){
struct node *temp = start;
while (temp != NULL && temp->link != NULL){
swap(&temp->info , &temp->link->info);
temp = temp->link->link;
} }
int main(){
int data, n;
start = NULL;
printf("Enter the number of nodes : ");
scanf("%d", &n);
for (int i=0 ; i<n ; i++){
printf("Enter the %d node : ", i+1);
scanf("%d", &data);
create_list(data);
}
printf("Entered Linked list is : ");
displayll();
Swapll();
printf("After swapping : ");
displayll();
return 0;
}






Question - 4
Write a C code to convert a doubly linked list into a circular
 doubly linked list.


#include<stdio.h>
#include<stdlib.h>
struct node{
int info;
struct node *next;
struct node *prev;
} *start;
void createList(int data){
struct node *temp, *q;
temp = (struct node*)malloc(sizeof(struct node));
temp->info = data;
temp->next = NULL;
if (start == NULL){
temp->prev = NULL;
start = temp;
}
else{
q = start;
while (q->next != NULL){
q = q->next;
}
q->next = temp;
temp->prev = q;
} }
void circular(){
struct node *first = start;
struct node *q = start;
while (q->next != NULL){
q = q->next;
}
q->next = start;
first->prev = q;
}
int main(){
int data, n;
start = NULL;
printf("Enter the number of nodes : ");
scanf("%d", &n);
for (int i=0 ; i<n ; i++){
printf("Enter the %d node : ", i+1);
scanf("%d", &data);
create_list(data);
}
printf("Entered Linked list is : ");
displayll();
return 0;
}





Question - 5
Write a C code to split the original single linked list into 
two sub-lists, where the first and second sub-list contains 
the even position nodes and odd position nodes of the original
 list respectively, and then join the second sub-list at the 
 end of the first sub-list. Example: If the list contains
  3->4->2->1->7->9->8, then the function needs to 
  produce 3->2->7->8->4->1->9.



#include<stdio.h>
#include<stdlib.h>
struct node{
int info;
struct node* link;
} *start;
void create_list(int data){
struct node *temp, *q;
temp = malloc(sizeof(struct node));
temp->info = data;
temp->link = NULL;
if (start == NULL){
start = temp;
return;
}
else{
q = start;
while (q->link != NULL){
q = q->link;
}
q->link = temp;
} }
void displayll(){
struct node *q;
if (start == NULL){
printf("List is empty!");
return;
}
q = start;
while (q != NULL){
printf("%d->", q->info);
q = q->link;
}
printf("NULL\n");
}
void oddBeforeEven(){
struct node *odd = start;
struct node *even = start->link;
struct node *evenstart = even;
while (odd->link != NULL && even->link != NULL){
odd->link = even->link;
odd = odd->link;
even->link = odd->link;
even = even->link;
}
odd->link = evenstart;
}
int main(){
int data, n;
start = NULL;
printf("Enter the number of nodes : ");
scanf("%d", &n);
for (int i=0 ; i<n ; i++){
printf("Enter the %d node : ", i+1);
scanf("%d", &data);
create_list(data);
}
printf("Entered Linked list is : ");
displayll();
oddBeforeEven();
displayll();
return 0;
}