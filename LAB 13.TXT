
NAME-AARYAN SINHA
ROLL-20051796
SUBJECT- DSA
SECTION- B26 SLOT 2
BRANCH-CSE


QUESTION 1 
Given a BST and a range low-to-high(inclusive). Write a C code to count the number of nodes in the BST that lie in the given range. 




#include<stdio.h>
#include<stdlib.h>

struct node {
    int info;
    struct node *left;
    struct node *right;
};

struct node* createNode(int x){
    struct node *temp;
    temp = (struct node*)malloc(sizeof(struct node));
    temp->info = x;
    temp->left = NULL;
    temp->right = NULL;
    return temp;
}

struct node* insertNode(struct node* root, int x){
    if (root == NULL){
        return createNode(x);
    }
    else if (x < root->info){
        root->left = insertNode(root->left, x);
    }
    else if (x > root->info){
        root->right = insertNode(root->right, x);
    }
    return root;
}

int countNodeRange(struct node* root, int lo, int hi){
    if (root == NULL){
        return 0;
    }
    if (root->info >= lo && root->info <= hi){
        return 1 + countNodeRange(root->left, lo, hi) + countNodeRange(root->right, lo, hi);
    }
    else if (root->info < lo){
        return countNodeRange(root->right, lo, hi);
    }
    else {
        return countNodeRange(root->left, lo, hi);
    }
}

int main(){
    struct node *root = createNode(10);
    insertNode(root, 5);
    insertNode(root, 50);
    insertNode(root, 1);
    insertNode(root, 40);
    insertNode(root, 100);

    int lo=5, hi=45;
    int ctr = countNodeRange(root, lo, hi);
    printf("%d\n", ctr);
    return 0;
}



QUESTION 2 :

Given a BST and a range low-to-high(inclusive). Write a C code to count the number of nodes in the BST that lie in the given range. 


#include <stdio.h>
#include <stdlib.h>
 

struct Node
{
    int data;
    struct Node *next;
};
 

void push(struct Node ** head_ref, int new_data)
{
    struct Node* new_node =
           (struct Node*) malloc(sizeof(struct Node));
    new_node->data  = new_data;
    new_node->next = (*head_ref);
    (*head_ref)  = new_node;
}

void printList(struct Node *head)
{
    struct Node *temp = head;
    while (temp != NULL)
    {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

void merge(struct Node *p, struct Node **q)
{
     struct Node *p_curr = p, *q_curr = *q;
     struct Node *p_next, *q_next;
 
     while (p_curr != NULL && q_curr != NULL)
     {
         
         p_next = p_curr->next;
         q_next = q_curr->next;
 
         
         q_curr->next = p_next;  
         p_curr->next = q_curr;  
 
       
         p_curr = p_next;
         q_curr = q_next;
    }
 
    *q = q_curr; 
}
 

int main()
{
     struct Node *p = NULL, *q = NULL;
     push(&p, 1);
     push(&p, 2);
     push(&p, 3);
     printf("First Linked List:\n");
     printList(p);
 
     push(&q, 7);
     push(&q, 13);
     push(&q, 1);
     printf("Second Linked List:\n");
     printList(q);
 
     merge(p, &q);
 
     printf("Modified First Linked List:\n");
     printList(p);
 
     printf("Modified Second Linked List:\n");
     printList(q);
 
     getchar();
     return 0;
}


QUESTION 3

Write the C code to print the postorder traversal of a binary tree from its preorder and inorder traversal.

#include<stdio.h>
#include<stdlib.h>
int search(int arr[], int x, int n)
{
    for (int i = 0; i < n; i++)
        if (arr[i] == x)
        return i;
        return -1;
}
void printPostOrder(int in[], int pre[], int n)
{
    int root = search(in, pre[0], n);
    if (root != 0)
    printPostOrder(in, pre + 1, root);
    if (root != n - 1)
    printPostOrder(in + root + 1, pre + root + 1, n - root - 1);
    printf("%d ", pre[0] );
}
int main()
{

    int in[] = {4,2,5,7,6};

    int pre[] = {5,2,4,7,6};

    int n = sizeof(in) / sizeof(in[0]);

    printf("Postorder traversal ");

    printPostOrder(in, pre, n);

    return 0;
}

