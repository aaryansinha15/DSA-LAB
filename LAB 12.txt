NAME-AARYAN SINHA
ROLL-20051796
SUBJECT- DSA
SECTION- B26 SLOT 2
BRANCH-CSE


QUESTION
// Construct a BST, implement all the cases of deletion, then display the tree using preorder traversal.


#include <stdio.h>
#include <stdlib.h>
struct node
{
    struct node *lchild;
    int info;
    struct node *rchild;
};
struct node *insert(struct node *ptr, int ikey)
{
    if (ptr == NULL)
    {
        ptr = (struct node *)malloc(sizeof(struct node));
        ptr->info = ikey;
        ptr->lchild = NULL;
        ptr->rchild = NULL;
    }
    else if (ikey < ptr->info)
        ptr->lchild = insert(ptr->lchild, ikey);
    else if (ikey > ptr->info)
        ptr->rchild = insert(ptr->rchild, ikey);
    else
        printf("Duplicate key\n");
    return ptr;
}
void preorder(struct node *ptr)
{
    if (ptr == NULL)
        return;
    printf("%d ", ptr->info);
    preorder(ptr->lchild);
    preorder(ptr->rchild);
}
struct node *search(struct node *ptr,int skey)
{
    if(ptr==NULL)
    return NULL;
    else if(skey < ptr->info)
        return search(ptr->lchild,skey);
     else if (skey < ptr->info)
        return search(ptr->rchild,skey);
     else
     return ptr;   
}

struct node* case_a(struct node *root,struct node *par,struct node *ptr)
// node to be deleted is having no child

// ptr is the node to be deleted
{  
    if(par==NULL)
    {
        root=NULL;
    }
    else if(ptr==par->lchild)
    par->lchild=NULL;
    else
    par->rchild=NULL;
    free(ptr);
    return root;
}
struct node* case_b(struct node *root,struct node *par,struct node *ptr)
// node to be deleted is having one child either left or right
{
   
  struct node *child;
  if(ptr->lchild!=NULL)  
  child=ptr->lchild;  //node to be deletd has left child
  else
//   child=ptr->rchild; node to be deleted has right child
  if(par==NULL)
  {
      root=child;   // node to be is the root child
  }
  else if (ptr==par->lchild)
  par->lchild=child;  // node to be is left child of parent
  else
  par->rchild=child;
  free(ptr);
  return root;
}
struct node* case_c(struct node *root,struct node *par,struct node *ptr)
{
    struct node *succ,*parsucc;
    parsucc=ptr;
    succ=ptr->rchild;
    while(succ->lchild!=NULL)
    {
        parsucc=succ;
        succ=succ->lchild;
    }
    ptr->info=succ->info;
    if(succ->lchild==NULL && succ->rchild==NULL)
    {
        root=case_a(root,parsucc,succ);
    }
    else
    root=case_b(root,parsucc,succ);
    return root;
}
struct node *del(struct node *root,int dkey)
{
    struct node *ptr,*par;
    ptr=root;
    par=NULL;
    while(ptr!=NULL)
    {
        if(dkey==ptr->info)
        break;
        par=ptr;
        if(dkey<ptr->info)
        {
            ptr=ptr->lchild;
        }
        else
        ptr=ptr->rchild;
    }
    if(ptr==NULL)
    printf("Key entered is not present");
    else if(ptr->lchild!=NULL && ptr->rchild!=NULL)
    root=case_c(root,par,ptr);
    else if((ptr->lchild!=NULL)||(ptr->rchild!=NULL))
    root=case_b(root,par,ptr);
    else
    root=case_a(root,par,ptr);
    return root;
}
int main()
{
    struct node *root = NULL, *ptr;
    int k;
    while (1)
    {
        printf("\n-----Menu-----\n");
        printf("1.Insert Key\n2.Pre order traversal\n3.Search\n4.Delete key\n5. Exit\n");
        printf("Enter Choice: ");
        int choice,size;
        scanf("%d", &choice);
        switch (choice)
        {
        case 1:
        printf("Enter num of elements ");
        scanf("%d",&size);
        for(int i=1;i<=size;i++)
        {
            printf("Enter the key to be inserted: ");
            scanf("%d", &k);
            root = insert(root, k);
        }
            break;
        case 2:
            preorder(root);
            break;
        
        case 3:
        
            printf("Enter the key to be searched: ");
            scanf("%d", &k);
            ptr = search(root, k);
            if (ptr == NULL)
                printf("Key not found");
            else
                printf("Key is present");
            break;
        
        case 4:
        
            printf("Enter the key to be deleted: ");
            scanf("%d", &k);
            ptr = del(root, k);
            break;
        case 5:
        exit(0);

        default:
            printf("Enter valid choice");
        }
    }

    return 0;
}